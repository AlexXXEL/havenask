package test;
import ha3.*;
import mock.*;

class TestScorerTest {

    boolean testProcess() {

      {
            CavaHa3ScorerTestHelper helper = CavaHa3ScorerTestHelper.create();
            TestScorer test = new TestScorer();

            helper.setInt32Attribute("id","100");//单值
            helper.setMInt32Attribute("ids","10,1");//多值
            helper.setKVMapApi("delta", "1000");

            ScorerProvider provider = helper.getScorerProvider();//必须在helper.setXXX之后调用,才能后去到正确的值
            //helper.setTraceLevel("ALL");
            TestUnit.assertEquals(test.init(provider), true, "init 0");
            helper.println(helper.getQueryTraceStr(provider));
            MatchDoc doc = helper.getMatchDoc(provider);//必须在init之后调用
            TestUnit.assertEquals(test.process(doc), (double)(100+10+1+1000), "score 0");
            helper.println(helper.getDocTraceStr(doc));
        }

        {
            CavaHa3ScorerTestHelper helper = CavaHa3ScorerTestHelper.create();
            TestScorer test = new TestScorer();

            helper.setInt32Attribute("id","100");//单值
            helper.setMInt32Attribute("ids","10,1");//多值
            //helper.setKVMapApi("delta", "1000");
            helper.setRequest("config=trace:trace3,rank_trace:trace3&&query=1&&kvpairs=delta:1000");

            ScorerProvider provider = helper.getScorerProvider();//必须在helper.setXXX之后调用,才能后去到正确的值

            TestUnit.assertEquals(test.init(provider), true, "init 1");
            helper.println(helper.getQueryTraceStr(provider));
            MatchDoc doc = helper.getMatchDoc(provider);//必须在init之后调用
            TestUnit.assertEquals(test.process(doc), (double)(100+10+1+1000), "score 1");
            helper.println(helper.getDocTraceStr(doc));
        }

        return true;
    }

    static int main() {
        TestScorerTest test = new TestScorerTest();
        if (!test.testProcess()) {
            return -1;
        }
        return 0;
    }

}
