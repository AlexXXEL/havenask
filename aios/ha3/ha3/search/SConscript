 # -*- mode: python -*-

Import('env')

env = env.Clone()

libsearch_sources = [
    'MultiAggregator.cpp',
    'AggregateFunction.cpp',
    'AggregatorCreator.cpp',
    'AggregateSampler.cpp',
    'BatchAggregateSampler.cpp',
    'BatchMultiAggregator.cpp',
    'AndNotQueryExecutor.cpp',
    'OrQueryExecutor.cpp',
    'AndQueryExecutor.cpp',
    'NumberQueryExecutor.cpp',
    'TermQueryExecutor.cpp',
    'PhraseQueryExecutor.cpp',
    'QueryExecutorCreator.cpp',
    'MultiQueryExecutor.cpp',
    'MultiTermAndQueryExecutor.cpp',
    'MultiTermOrQueryExecutor.cpp',
    'MultiTermBitmapAndQueryExecutor.cpp',
    'Filter.cpp',
    'PKQueryExecutor.cpp',
    'MatchDocSearcher.cpp',
    'SummarySearcher.cpp',
    'SummaryFetcher.cpp',
    'RankSearcher.cpp',
    'SingleLayerSearcher.cpp',
    'ResultEstimator.cpp',
    'LayerRangeDistributor.cpp',
    'SearcherCache.cpp',
    'DefaultSearcherCacheStrategy.cpp',
    'CacheResult.cpp',
    'LayerMetas.cpp',
    'LayerMetasCreator.cpp',
    'OptimizerChainManager.cpp',
    'AuxiliaryChainOptimizer.cpp',
    'TermDFVisitor.cpp',
    'OptimizerChain.cpp',
    'AuxiliaryChainVisitor.cpp',
    'LayerValidator.cpp',
    'SortExpressionCreator.cpp',
    'HitCollectorManager.cpp',
    'BitmapTermQueryExecutor.cpp',
    'BitmapAndQueryExecutor.cpp',
    'MatchDataManager.cpp',
    'CacheMinScoreFilter.cpp',
    'IndexPartitionReaderWrapper.cpp',
    'PartialIndexPartitionReaderWrapper.cpp',
    'MatchDocScorers.cpp',
    'SortExpression.cpp',
    'BufferedTermQueryExecutor.cpp',
    'FieldMapTermQueryExecutor.cpp',
    'SubFieldMapTermQueryExecutor.cpp',
    'ProviderBase.cpp',
    'SimpleMatchDataFetcher.cpp',
    'MatchValuesFetcher.cpp',
    'MatchDataFetcher.cpp',
    'FullMatchDataFetcher.cpp',
    'SubSimpleMatchDataFetcher.cpp',
    'IndexPartitionWrapper.cpp',
    'AttributeMetaInfo.cpp',
    'SubTermQueryExecutor.cpp',
    'FilterWrapper.cpp',
    'JoinFilter.cpp',
    'SearcherCacheManager.cpp',
    'MatchDocSearchStrategy.cpp',
    'CacheMissSearchStrategy.cpp',
    'CacheHitSearchStrategy.cpp',
    'SeekAndRankProcessor.cpp',
    'ExtraRankProcessor.cpp',
    'RerankProcessor.cpp',
    'DocCountLimits.cpp',
    'LayerMetaUtil.cpp',
    'QueryExecutorRestrictor.cpp',
    'RestrictPhraseQueryExecutor.cpp',
    'OptimizerChainManagerCreator.cpp',
    'WeakAndQueryExecutor.cpp',
    'SearcherCacheInfo.cpp',
    'RangeTermQueryExecutor.cpp',
    'SpatialTermQueryExecutor.cpp',
    'Ha3ProviderCreator.cpp',
    'TupleAggregator.cpp',
    'DistinctCountAggregateFunction.cpp',
    'IndexPartitionReaderUtil.cpp',
]

env.aLibrary(target = 'ha3_search',
             source = libsearch_sources)

env.aDirs('test')
#env.aDirs('perftest')
